services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: llm-platform-db
    environment:
      POSTGRES_DB: llm_testing_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: llm-platform-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: llm_testing_platform
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      FRONTEND_URL: http://localhost
      # MinIO settings (overridden by .env if present)
      MINIO_ENDPOINT: minio
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: chat-uploads
      # Public URL for generated links via nginx proxy
      MINIO_PUBLIC_BASE_URL: http://162.38.2.150/minio
    # Remove port exposure - only accessible through nginx
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => { process.exit(1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_API_URL: /api
    container_name: llm-platform-frontend
    # Remove port exposure - only accessible through nginx
    expose:
      - "80"
    depends_on:
      backend:
        condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: llm-platform-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - minio
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Ollama (Optional - for local LLM support)
  ollama:
    image: ollama/ollama:latest
    container_name: llm-platform-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    profiles:
      - ollama

  # MinIO (S3-compatible object storage for images)
  minio:
    image: minio/minio:latest
    container_name: llm-platform-minio
    command: server /data --console-address :9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO setup: create bucket and make it publicly readable for serving images
  minio-setup:
    image: minio/mc:latest
    container_name: llm-platform-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mc alias set local http://minio:9000 minioadmin minioadmin &&
       mc mb -p local/chat-uploads || true &&
       mc anonymous set download local/chat-uploads || true &&
       echo 'MinIO bucket chat-uploads ready'"
    restart: "no"

volumes:
  postgres_data:
  ollama_data:
  nginx_logs:
  minio_data:
